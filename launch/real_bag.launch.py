import numpy as np
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, ExecuteProcess, OpaqueFunction, TimerAction
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import PathJoinSubstitution
import os

Q = [0.0002766821617934846, 0.00024360528146675283, 0.00026029584062386047, -0.0018622965495874938, 9.717894370939925e-09, -5.5885421468534184e-05, -0.0003910580314717166, 0.00011584327760751707, -0.0009877095428262675, 0.0008180544338558829, -0.00028089860870256136, 0.0012432457816008637, -7.573306958192491e-05, 0.0003423982217586069, 0.00024360528146675283, 0.0002742912584663503, -0.00034991987992446366, -0.0017010631355068094, 0.00022910225052416022, 0.0003075681796050121, -0.0006365324491499127, 0.0006564219768992061, -0.0011836749561012015, 0.0007720033683955189, -2.2664068078401283e-05, 0.0012581544879781905, -0.00010750498222737836, -0.00014847923692979975, 0.00026029584062386047, -0.00034991987992446366, 0.005872554208023522, -0.0011443714228913887, -0.0026427280122326992, -0.0034880564783681903, 0.0024888617195282657, -0.00572757605156128, 0.002206309050835321, -0.0001491187929934522, -0.002404302103620433, -0.0005479076917923205, 0.0006139944166425271, 0.004608474745760529, -0.0018622965495874938, -0.0017010631355068094, -0.0011443714228913887, 0.012691345527093379, -0.00029092681162888557, -3.3588266412300536e-05, 0.0030259585162991493, -0.002045634760140944, 0.007049486833346673, -0.005045602744174763, 0.0022112250965382503, -0.008712036082975307, 0.0010072606506674234, -0.001653663652516046, 9.717894370939925e-09, 0.00022910225052416022, -0.0026427280122326992, -0.00029092681162888557, 0.01022310473316656, 0.0008022188264781384, -0.0015325867407232035, 0.01084824420066507, -0.0030929129189288863, 0.010548280668499851, 0.0016182706771679198, 0.00326374980143339, -0.00566234942967216, 0.000437895590017666, -5.5885421468534184e-05, 0.0003075681796050121, -0.0034880564783681903, -3.3588266412300536e-05, 0.0008022188264781384, 0.002245699263130918, -0.0016420596053107485, 0.002911745735059739, -0.0016366105256254615, -0.0007799889494603918, 0.0008032908820750206, 0.0005486867310651755, 9.051745728653256e-05, -0.003202346741704057, -0.0003910580314717166, -0.0006365324491499127, 0.0024888617195282657, 0.0030259585162991493, -0.0015325867407232035, -0.0016420596053107485, 0.00214729401985709, -0.003963017919315506, 0.0030320530790017737, -0.0009136811023243384, -0.00040713365483602206, -0.00294034962162283, 0.0012226507986529001,
     0.0016425029810385673, 0.00011584327760751707, 0.0006564219768992061, -0.00572757605156128, -0.002045634760140944, 0.01084824420066507, 0.002911745735059739, -0.003963017919315506, 0.01936466435959044, -0.005217958832339211, 0.008218102511937352, 6.59381680301691e-05, 0.005479746033868511, -0.008813201185813151, -0.002267693827667285, -0.0009877095428262675, -0.0011836749561012015, 0.002206309050835321, 0.007049486833346673, -0.0030929129189288863, -0.0016366105256254615, 0.0030320530790017737, -0.005217958832339211, 0.010438056941395013, -0.004780993206191367, -0.0001446173922145601, -0.003931305137619914, 0.0013007214273525497, 0.0015521579881283107, 0.0008180544338558829, 0.0007720033683955189, -0.0001491187929934522, -0.005045602744174763, 0.010548280668499851, -0.0007799889494603918, -0.0009136811023243384, 0.008218102511937352, -0.004780993206191367, 0.0300085895623101, 0.004796377323653909, 0.005332260189821067, 0.0001486538468224545, 0.005053529089140399, -0.00028089860870256136, -2.2664068078401283e-05, -0.002404302103620433, 0.0022112250965382503, 0.0016182706771679198, 0.0008032908820750206, -0.00040713365483602206, 6.59381680301691e-05, -0.0001446173922145601, 0.004796377323653909, 0.010416577068115685, -0.0026964691398966532, 0.0018574594371722685, 0.0036115179667326977, 0.0012432457816008637, 0.0012581544879781905, -0.0005479076917923205, -0.008712036082975307, 0.00326374980143339, 0.0005486867310651755, -0.00294034962162283, 0.005479746033868511, -0.003931305137619914, 0.005332260189821067, -0.0026964691398966532, 0.008926402351268488, -0.0036537107096019684, -2.8800414494042484e-05, -7.573306958192491e-05, -0.00010750498222737836, 0.0006139944166425271, 0.0010072606506674236, -0.00566234942967216, 9.051745728653262e-05, 0.0012226507986529, -0.008813201185813151, 0.0013007214273525497, 0.0001486538468224545, 0.0018574594371722683, -0.0036537107096019684, 0.007749098393132108, -0.0005232757412954428, 0.0003423982217586069, -0.00014847923692979975, 0.004608474745760529, -0.0016536636525160458, 0.0004378955900176659, -0.0032023467417040567, 0.001642502981038567, -0.002267693827667285, 0.0015521579881283107, 0.005053529089140399, 0.003611517966732698, -2.880041449404222e-05, -0.0005232757412954428, 0.00808026896651574]
pos_R = [7.545688127493993, 0.5389320091975889,
         0.5389320091975889, 3.6860574643722543]
vel_R = [0.8179157338388128, 0.3327752802367917, 2.147992803633726,
         0.3327752802367917, 0.8614190729349765, 1.2095776940134733,
         2.147992803633726, 1.2095776940134733, 9.197260517868244]
acc_R = [4.637740000944543, -0.2590859636318797, -0.19349216833850175,
         -0.25908596363187975, 5.960255828252986, -0.885739921559456,
         -0.19349216833850175, -0.885739921559456, 2.3152805573436175]

# Q = [2.27157453e-05, 1.07853528e-04, 9.18906052e-03,
#      8.21363025e-03, 9.95703086e-03, 1.83803188e-02,
#      1.21363025e-2, 1.21363025e-2,
#      6.69823597e-03, 6.26658635e-03, 7.09409103e-03,
#      1e-5, 1e-5, 1e-5]
# Qnp = np.diag(np.array(Q))
# Q = list(Qnp.reshape(-1))

# pos_R = [4.148242398539099, 0.0,
#          0.0, 5.702412298355506]
# vel_R = [0.16966872074959238, 0.0, 0.0,
#          0.0, 0.06049256508421064, 0.0,
#          0.0, 0.0, 0.13327101067543388]
# acc_R = [3.652282205366519, 0.0, 0.0,
#          0.0, 4.333955375627488, 0.0,
#          0.0, 0.0, 3.23400083776894456]


def launch_setup(context, *args, **kwargs):
    root_dir = os.path.dirname(
        os.path.dirname(os.path.realpath(__file__)))

    gain = 0.7
    magnetic_rejection = 0.0
    acceleration_rejection = 15.0
    recovery_trigger_period = 1
    params = ["--ros-args",
              "-p", f"gain:={gain}",
              "-p", f"magnetic_rejection:={magnetic_rejection}",
              "-p", f"acceleration_rejection:={acceleration_rejection}",
              "-p", f"recovery_trigger_period:={recovery_trigger_period}"]
    orientation_filter = ExecuteProcess(
        cmd=[f'{root_dir}/src/estimation/build/orientation_filter'] + params,
        output='screen',
    )

    tracking = ExecuteProcess(
        cmd=['./tracking_ros_node'],
        cwd=f'{root_dir}/src/detection/build',
        # prefix=['xterm  -e gdb -ex "run" --args'],
        output='screen'
    )

    uncompress = ExecuteProcess(
        cmd=['ros2', 'run', 'image_transport', 'republish', 'compressed', 'raw', '--ros-args', '-r',
             '/in/compressed:=/camera/color/image_raw/compressed', '-r', 'out:=/camera/color/image_raw'],
        output='screen'
    )

    WHICH = int(context.launch_configurations['which'])
    MODE = int(context.launch_configurations['mode'])
    bag_name = ""
    offset = -1
    BAG0_OFF = 130
    if WHICH == 0:
        bag_name = "./18_0/rosbag2_2023_10_18-12_24_19"
        offset = BAG0_OFF
    else:
        bag_name = "./latest_flight/rosbag2_2023_10_18-16_22_16"
        modes = [
            1500,  # going to the moon
            1900,  # 1942,
            2275
        ]
        offset = modes[MODE]

    play_bag_cmd = f'''ros2 bag play {bag_name} --start-offset {offset}'''
    play_bag = ExecuteProcess(
        cmd=play_bag_cmd.split(),
        cwd=f"{root_dir}/bags",
        output='screen'
    )

    run_name = bag_name.split('/')[-2]
    if offset != BAG0_OFF:
        run_name += f'_mode{MODE}'

    record_state = ExecuteProcess(
        cmd=["python3", "record_state.py", run_name],
        cwd=f"{root_dir}/scripts",
        output='screen'
    )

    baro_ref = 0.0
    if WHICH == 0:
        baro_ref = 25.94229507446289
    else:
        baro_ref = 7.0
    flow_err_threshold = 5.0
    estimation = ExecuteProcess(
        cmd=["./estimation_node", "--ros-args",
             "-p", f"baro_ground_ref:={baro_ref}",
             "-p", f"spatial_vel_flow_error:={flow_err_threshold}",
             "-p", f"flow_vel_rejection_perc:={10.0}",
             "-p", f"process_covariance:={Q}",
             "-p", f"pos_R:={pos_R}",
             "-p", f"vel_R:={vel_R}",
             "-p", f"acc_R:={acc_R}"],
        cwd=f'{root_dir}/src/estimation/build',
        # prefix=['xterm  -e gdb -ex "run" --args'],
        output='screen'
    )
    # wrap into timer to launch 2 seconds after everything
    est_timer = TimerAction(
        period=1.0,
        actions=[estimation]
    )

    return [
        play_bag,
        tracking,
        est_timer,
        uncompress,
        orientation_filter,
        record_state
    ]


def generate_launch_description():
    # Declare the command line arguments
    which_arg = DeclareLaunchArgument(
        'which',
        default_value='0',  # 0 or 1
        description='Which argument'
    )

    mode_arg = DeclareLaunchArgument(
        'mode',
        default_value='0',  # 0, 1, 2
        description='Mode argument'
    )

    evaluate_args = OpaqueFunction(function=launch_setup)

    return LaunchDescription([
        which_arg,
        mode_arg,
        evaluate_args
    ])
