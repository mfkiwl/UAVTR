import numpy as np
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, ExecuteProcess, OpaqueFunction, TimerAction
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import PathJoinSubstitution
import os

Q = [2.2603252406480565, 0.3881918800852789, 0.1631811785236548, 0.11562167483197759, 0.10167389843978113, -0.015130066238201935, -0.017154892944706516, -0.17569029485565538, -0.08226680189615718, 0.2646006485021987, -0.03303831995543307, 0.029379885862152972, -0.16261851122877352, 0.06740507577419513, 0.3881918800852789, 2.2508440297562906, 0.09421193654989808, 0.03588623764677061, -0.12683420480036137, -0.02813392128667521, -0.03930372486527666, -0.049634202013199326, -0.14015031665731267, 0.18888021821785783, -0.030609942085554464, 0.1445605377335788, -0.1127469827394527, 0.15964076245296485, 0.1631811785236548, 0.09421193654989808, 0.6117553516427734, -0.09433940506409737, -0.008193998922146346, -0.046237882664628714, 0.08006449501183581, -0.2891256113486882, -0.004527196015469712, -0.0739354448805576, -0.09696868181019987, 0.10709603166626233, 0.041586239234443594, -0.10879475280254838, 0.11562167483197759, 0.03588623764677061, -0.09433940506409737, 0.5755431178293611, 0.3268029500212806, 0.061594231108197096, 0.06967273684628197, 0.1577532000325941, -0.34102682432134945, 0.00706554074530403, 0.13139364301350404, 0.11476922983854371, -0.044190794082312496, -0.05646604840637136, 0.10167389843978113, -0.12683420480036137, -0.008193998922146346, 0.3268029500212806, 1.3410283859720782, -0.041897637785023846, 0.061774202502450186, 0.1465084001651414, -0.07473152720637881, -0.17199991998662897, -0.016818475013958004, 0.006545644459066472, -0.08945999952811555, -0.15133967348202232, -0.015130066238201935, -0.02813392128667521, -0.046237882664628714, 0.061594231108197096, -0.041897637785023846, 1.5733535528183507, -0.005990426266600231, 0.049566459009874664, -0.09134018512920589, -0.04669855372136449, 0.17775646889995803, 0.09093434147673769, 0.08454751506945754, 0.04364928354641006, -0.017154892944706516, -0.03930372486527666, 0.08006449501183581, 0.06967273684628197, 0.061774202502450186, -0.005990426266600231, 0.2848595380163751, 0.06701497857858904, -0.24482627633081377, -0.20812765805310632, -0.18884248938419282, -0.18024717192763823, 0.17277532738505239, -0.2221061185837872, -0.17569029485565538, -0.049634202013199326, -0.2891256113486882, 0.1577532000325941, 0.1465084001651414, 0.049566459009874664, 0.06701497857858904, 1.3171972165149128, -0.19762782306312135, -0.11242345125857947, 0.3088708887226814, 0.10979790753833325, 0.21382055715556206, 0.3299539579981582, -0.08226680189615718, -0.14015031665731267, -0.004527196015469712, -0.34102682432134945, -0.07473152720637881, -0.09134018512920589, -0.24482627633081377, -0.19762782306312135, 0.6719145455832688, -0.06443405552802604, -0.04803477673666973, 0.04932287182287226, 0.06665460656926306, 0.0803755500117313, 0.2646006485021987, 0.18888021821785783, -0.0739354448805576, 0.00706554074530403, -0.17199991998662897, -0.04669855372136449, -0.20812765805310632, -0.11242345125857947, -0.06443405552802604, 0.7999794905704041, 0.18776476547218174, 0.058694982190135435, -0.4563892964147987, 0.23522925227384445, -0.03303831995543307, -0.030609942085554464, -0.09696868181019987, 0.13139364301350404, -0.016818475013958004, 0.17775646889995803, -0.18884248938419282, 0.3088708887226814, -0.04803477673666973, 0.18776476547218174, 1.0766759712725675, 0.10560447398498883, 0.10489633808688298, 0.2470493856863037, 0.029379885862152972, 0.1445605377335788, 0.10709603166626233, 0.11476922983854371, 0.006545644459066472, 0.09093434147673769, -0.18024717192763823, 0.10979790753833325, 0.04932287182287226, 0.058694982190135435, 0.10560447398498883, 1.087526013995609, -0.00898693670841913, -0.07378907925198372, -0.16261851122877352, -0.1127469827394527, 0.0415862392344436, -0.044190794082312496, -0.08945999952811555, 0.08454751506945753, 0.17277532738505239, 0.21382055715556203, 0.06665460656926306, -0.45638929641479875, 0.10489633808688298, -0.008986936708419158, 1.0801082422109936, 0.04657180728887472, 0.06740507577419513, 0.15964076245296485, -0.10879475280254838, -0.056466048406371344, -0.15133967348202232, 0.04364928354641006, -0.22210611858378718, 0.3299539579981582, 0.0803755500117313, 0.23522925227384447, 0.2470493856863037, -0.07378907925198372, 0.04657180728887472, 0.9542727282688469]
pos_R = [0.8320827625641619, 0.0, 0.0, 2.1273612426931967]
vel_R = [1.3710163337622554, 0.0, 0.0, 0.0, 1.4649192957490682, 0.0, 0.0, 0.0, 0.7488830521160812]
acc_R = [3.7847047144570167, 0.0, 0.0, 0.0, 5.111472714449268, 0.0, 0.0, 0.0, 5.396101987616149]

# Q = [2.27157453e-05, 1.07853528e-04, 9.18906052e-03,
#      8.21363025e-03, 9.95703086e-03, 1.83803188e-02,
#      1.21363025e-2, 1.21363025e-2,
#      6.69823597e-03, 6.26658635e-03, 7.09409103e-03,
#      1e-5, 1e-5, 1e-5]
# Qnp = np.diag(np.array(Q))
# Q = list(Qnp.reshape(-1))

# pos_R = [4.148242398539099, 0.0,
#          0.0, 5.702412298355506]
# vel_R = [0.16966872074959238, 0.0, 0.0,
#          0.0, 0.06049256508421064, 0.0,
#          0.0, 0.0, 0.13327101067543388]
# acc_R = [3.652282205366519, 0.0, 0.0,
#          0.0, 4.333955375627488, 0.0,
#          0.0, 0.0, 3.23400083776894456]


def launch_setup(context, *args, **kwargs):
    root_dir = os.path.dirname(
        os.path.dirname(os.path.realpath(__file__)))

    gain = 0.7
    magnetic_rejection = 0.0
    acceleration_rejection = 15.0
    recovery_trigger_period = 1
    params = ["--ros-args",
              "-p", f"gain:={gain}",
              "-p", f"magnetic_rejection:={magnetic_rejection}",
              "-p", f"acceleration_rejection:={acceleration_rejection}",
              "-p", f"recovery_trigger_period:={recovery_trigger_period}"]
    orientation_filter = ExecuteProcess(
        cmd=[f'{root_dir}/src/estimation/build/orientation_filter'] + params,
        output='screen',
    )

    tracking = ExecuteProcess(
        cmd=['./tracking_ros_node'],
        cwd=f'{root_dir}/src/detection/build',
        # prefix=['xterm  -e gdb -ex "run" --args'],
        output='screen'
    )

    uncompress = ExecuteProcess(
        cmd=['ros2', 'run', 'image_transport', 'republish', 'compressed', 'raw', '--ros-args', '-r',
             '/in/compressed:=/camera/color/image_raw/compressed', '-r', 'out:=/camera/color/image_raw'],
        output='screen'
    )

    WHICH = int(context.launch_configurations['which'])
    MODE = int(context.launch_configurations['mode'])
    bag_name = ""
    offset = -1
    BAG0_OFF = 130
    if WHICH == 0:
        bag_name = "./18_0/rosbag2_2023_10_18-12_24_19"
        offset = BAG0_OFF
    else:
        bag_name = "./latest_flight/rosbag2_2023_10_18-16_22_16"
        modes = [
            1500,  # going to the moon
            1900,  # 1942,
            2275
        ]
        offset = modes[MODE]

    play_bag_cmd = f'''ros2 bag play {bag_name} --start-offset {offset}'''
    play_bag = ExecuteProcess(
        cmd=play_bag_cmd.split(),
        cwd=f"{root_dir}/bags",
        output='screen'
    )

    run_name = bag_name.split('/')[-2]
    if offset != BAG0_OFF:
        run_name += f'_mode{MODE}'

    record_state = ExecuteProcess(
        cmd=["python3", "record_state.py", run_name],
        cwd=f"{root_dir}/scripts",
        output='screen'
    )

    baro_ref = 0.0
    if WHICH == 0:
        baro_ref = 25.94229507446289
    else:
        baro_ref = 7.0
    flow_err_threshold = 5.0
    estimation = ExecuteProcess(
        cmd=["./estimation_node", "--ros-args",
             "-p", f"baro_ground_ref:={baro_ref}",
             "-p", f"spatial_vel_flow_error:={flow_err_threshold}",
             "-p", f"flow_vel_rejection_perc:={10.0}",
             "-p", f"process_covariance:={Q}",
             "-p", f"pos_R:={pos_R}",
             "-p", f"vel_R:={vel_R}",
             "-p", f"acc_R:={acc_R}"],
        cwd=f'{root_dir}/src/estimation/build',
        # prefix=['xterm  -e gdb -ex "run" --args'],
        output='screen'
    )
    # wrap into timer to launch 2 seconds after everything
    est_timer = TimerAction(
        period=1.0,
        actions=[estimation]
    )

    return [
        play_bag,
        tracking,
        est_timer,
        uncompress,
        orientation_filter,
        record_state
    ]


def generate_launch_description():
    # Declare the command line arguments
    which_arg = DeclareLaunchArgument(
        'which',
        default_value='0',  # 0 or 1
        description='Which argument'
    )

    mode_arg = DeclareLaunchArgument(
        'mode',
        default_value='0',  # 0, 1, 2
        description='Mode argument'
    )

    evaluate_args = OpaqueFunction(function=launch_setup)

    return LaunchDescription([
        which_arg,
        mode_arg,
        evaluate_args
    ])
